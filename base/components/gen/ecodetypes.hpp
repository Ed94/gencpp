#ifdef GEN_INTELLISENSE_DIRECTIVES
#pragma once
#include "components/types.hpp"
#endif

// This file was generated automatially by gencpp's bootstrap.cpp (See: https://github.com/Ed94/gencpp)

enum CodeType : u32
{
	CT_Invalid,
	CT_Untyped,
	CT_NewLine,
	CT_Comment,
	CT_Access_Private,
	CT_Access_Protected,
	CT_Access_Public,
	CT_PlatformAttributes,
	CT_Class,
	CT_Class_Fwd,
	CT_Class_Body,
	CT_Constructor,
	CT_Constructor_Fwd,
	CT_Destructor,
	CT_Destructor_Fwd,
	CT_Enum,
	CT_Enum_Fwd,
	CT_Enum_Body,
	CT_Enum_Class,
	CT_Enum_Class_Fwd,
	CT_Execution,
	CT_Export_Body,
	CT_Extern_Linkage,
	CT_Extern_Linkage_Body,
	CT_Friend,
	CT_Function,
	CT_Function_Fwd,
	CT_Function_Body,
	CT_Global_Body,
	CT_Module,
	CT_Namespace,
	CT_Namespace_Body,
	CT_Operator,
	CT_Operator_Fwd,
	CT_Operator_Member,
	CT_Operator_Member_Fwd,
	CT_Operator_Cast,
	CT_Operator_Cast_Fwd,
	CT_Parameters,
	CT_Preprocess_Define,
	CT_Preprocess_Include,
	CT_Preprocess_If,
	CT_Preprocess_IfDef,
	CT_Preprocess_IfNotDef,
	CT_Preprocess_ElIf,
	CT_Preprocess_Else,
	CT_Preprocess_EndIf,
	CT_Preprocess_Pragma,
	CT_Specifiers,
	CT_Struct,
	CT_Struct_Fwd,
	CT_Struct_Body,
	CT_Template,
	CT_Typedef,
	CT_Typename,
	CT_Union,
	CT_Union_Fwd,
	CT_Union_Body,
	CT_Using,
	CT_Using_Namespace,
	CT_Variable,
	CT_NumTypes,
	CT_UnderlyingType = GEN_U32_MAX
};

inline Str codetype_to_str( CodeType type )
{
	local_persist Str lookup[61] = {
		{ "Invalid",             sizeof( "Invalid" )             },
		{ "Untyped",             sizeof( "Untyped" )             },
		{ "NewLine",             sizeof( "NewLine" )             },
		{ "Comment",             sizeof( "Comment" )             },
		{ "Access_Private",      sizeof( "Access_Private" )      },
		{ "Access_Protected",    sizeof( "Access_Protected" )    },
		{ "Access_Public",       sizeof( "Access_Public" )       },
		{ "PlatformAttributes",  sizeof( "PlatformAttributes" )  },
		{ "Class",               sizeof( "Class" )               },
		{ "Class_Fwd",           sizeof( "Class_Fwd" )           },
		{ "Class_Body",          sizeof( "Class_Body" )          },
		{ "Constructor",         sizeof( "Constructor" )         },
		{ "Constructor_Fwd",     sizeof( "Constructor_Fwd" )     },
		{ "Destructor",          sizeof( "Destructor" )          },
		{ "Destructor_Fwd",      sizeof( "Destructor_Fwd" )      },
		{ "Enum",                sizeof( "Enum" )                },
		{ "Enum_Fwd",            sizeof( "Enum_Fwd" )            },
		{ "Enum_Body",           sizeof( "Enum_Body" )           },
		{ "Enum_Class",          sizeof( "Enum_Class" )          },
		{ "Enum_Class_Fwd",      sizeof( "Enum_Class_Fwd" )      },
		{ "Execution",           sizeof( "Execution" )           },
		{ "Export_Body",         sizeof( "Export_Body" )         },
		{ "Extern_Linkage",      sizeof( "Extern_Linkage" )      },
		{ "Extern_Linkage_Body", sizeof( "Extern_Linkage_Body" ) },
		{ "Friend",              sizeof( "Friend" )              },
		{ "Function",            sizeof( "Function" )            },
		{ "Function_Fwd",        sizeof( "Function_Fwd" )        },
		{ "Function_Body",       sizeof( "Function_Body" )       },
		{ "Global_Body",         sizeof( "Global_Body" )         },
		{ "Module",              sizeof( "Module" )              },
		{ "Namespace",           sizeof( "Namespace" )           },
		{ "Namespace_Body",      sizeof( "Namespace_Body" )      },
		{ "Operator",            sizeof( "Operator" )            },
		{ "Operator_Fwd",        sizeof( "Operator_Fwd" )        },
		{ "Operator_Member",     sizeof( "Operator_Member" )     },
		{ "Operator_Member_Fwd", sizeof( "Operator_Member_Fwd" ) },
		{ "Operator_Cast",       sizeof( "Operator_Cast" )       },
		{ "Operator_Cast_Fwd",   sizeof( "Operator_Cast_Fwd" )   },
		{ "Parameters",          sizeof( "Parameters" )          },
		{ "Preprocess_Define",   sizeof( "Preprocess_Define" )   },
		{ "Preprocess_Include",  sizeof( "Preprocess_Include" )  },
		{ "Preprocess_If",       sizeof( "Preprocess_If" )       },
		{ "Preprocess_IfDef",    sizeof( "Preprocess_IfDef" )    },
		{ "Preprocess_IfNotDef", sizeof( "Preprocess_IfNotDef" ) },
		{ "Preprocess_ElIf",     sizeof( "Preprocess_ElIf" )     },
		{ "Preprocess_Else",     sizeof( "Preprocess_Else" )     },
		{ "Preprocess_EndIf",    sizeof( "Preprocess_EndIf" )    },
		{ "Preprocess_Pragma",   sizeof( "Preprocess_Pragma" )   },
		{ "Specifiers",          sizeof( "Specifiers" )          },
		{ "Struct",              sizeof( "Struct" )              },
		{ "Struct_Fwd",          sizeof( "Struct_Fwd" )          },
		{ "Struct_Body",         sizeof( "Struct_Body" )         },
		{ "Template",            sizeof( "Template" )            },
		{ "Typedef",             sizeof( "Typedef" )             },
		{ "Typename",            sizeof( "Typename" )            },
		{ "Union",               sizeof( "Union" )               },
		{ "Union_Fwd",           sizeof( "Union_Fwd" )           },
		{ "Union_Body",          sizeof( "Union_Body" )          },
		{ "Using",               sizeof( "Using" )               },
		{ "Using_Namespace",     sizeof( "Using_Namespace" )     },
		{ "Variable",            sizeof( "Variable" )            },
	};
	return lookup[type];
}

inline Str codetype_to_keyword_str( CodeType type )
{
	local_persist Str lookup[61] = {
		{ "__NA__",          sizeof( "__NA__" ) - 1          },
		{ "__NA__",          sizeof( "__NA__" ) - 1          },
		{ "__NA__",          sizeof( "__NA__" ) - 1          },
		{ "//",              sizeof( "//" ) - 1              },
		{ "private",         sizeof( "private" ) - 1         },
		{ "protected",       sizeof( "protected" ) - 1       },
		{ "public",          sizeof( "public" ) - 1          },
		{ "__NA__",          sizeof( "__NA__" ) - 1          },
		{ "class",           sizeof( "class" ) - 1           },
		{ "clsss",           sizeof( "clsss" ) - 1           },
		{ "__NA__",          sizeof( "__NA__" ) - 1          },
		{ "__NA__",          sizeof( "__NA__" ) - 1          },
		{ "__NA__",          sizeof( "__NA__" ) - 1          },
		{ "__NA__",          sizeof( "__NA__" ) - 1          },
		{ "__NA__",          sizeof( "__NA__" ) - 1          },
		{ "enum",            sizeof( "enum" ) - 1            },
		{ "enum",            sizeof( "enum" ) - 1            },
		{ "__NA__",          sizeof( "__NA__" ) - 1          },
		{ "enum class",      sizeof( "enum class" ) - 1      },
		{ "enum class",      sizeof( "enum class" ) - 1      },
		{ "__NA__",          sizeof( "__NA__" ) - 1          },
		{ "__NA__",          sizeof( "__NA__" ) - 1          },
		{ "extern",          sizeof( "extern" ) - 1          },
		{ "extern",          sizeof( "extern" ) - 1          },
		{ "friend",          sizeof( "friend" ) - 1          },
		{ "__NA__",          sizeof( "__NA__" ) - 1          },
		{ "__NA__",          sizeof( "__NA__" ) - 1          },
		{ "__NA__",          sizeof( "__NA__" ) - 1          },
		{ "__NA__",          sizeof( "__NA__" ) - 1          },
		{ "module",          sizeof( "module" ) - 1          },
		{ "namespace",       sizeof( "namespace" ) - 1       },
		{ "__NA__",          sizeof( "__NA__" ) - 1          },
		{ "operator",        sizeof( "operator" ) - 1        },
		{ "operator",        sizeof( "operator" ) - 1        },
		{ "operator",        sizeof( "operator" ) - 1        },
		{ "operator",        sizeof( "operator" ) - 1        },
		{ "operator",        sizeof( "operator" ) - 1        },
		{ "operator",        sizeof( "operator" ) - 1        },
		{ "__NA__",          sizeof( "__NA__" ) - 1          },
		{ "define",          sizeof( "define" ) - 1          },
		{ "include",         sizeof( "include" ) - 1         },
		{ "if",              sizeof( "if" ) - 1              },
		{ "ifdef",           sizeof( "ifdef" ) - 1           },
		{ "ifndef",          sizeof( "ifndef" ) - 1          },
		{ "elif",            sizeof( "elif" ) - 1            },
		{ "else",            sizeof( "else" ) - 1            },
		{ "endif",           sizeof( "endif" ) - 1           },
		{ "pragma",          sizeof( "pragma" ) - 1          },
		{ "__NA__",          sizeof( "__NA__" ) - 1          },
		{ "struct",          sizeof( "struct" ) - 1          },
		{ "struct",          sizeof( "struct" ) - 1          },
		{ "__NA__",          sizeof( "__NA__" ) - 1          },
		{ "template",        sizeof( "template" ) - 1        },
		{ "typedef",         sizeof( "typedef" ) - 1         },
		{ "__NA__",          sizeof( "__NA__" ) - 1          },
		{ "union",           sizeof( "union" ) - 1           },
		{ "union",           sizeof( "union" ) - 1           },
		{ "__NA__",          sizeof( "__NA__" ) - 1          },
		{ "using",           sizeof( "using" ) - 1           },
		{ "using namespace", sizeof( "using namespace" ) - 1 },
		{ "__NA__",          sizeof( "__NA__" ) - 1          },
	};
	return lookup[type];
}

forceinline Str to_str( CodeType type )
{
	return codetype_to_str( type );
}

forceinline Str to_keyword_str( CodeType type )
{
	return codetype_to_keyword_str( type );
}
