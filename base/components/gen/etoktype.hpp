#ifdef GEN_INTELLISENSE_DIRECTIVES
#pragma once
#include "components/types.hpp"
#endif

// This file was generated automatially by gencpp's bootstrap.cpp (See: https://github.com/Ed94/gencpp)

GEN_NS_PARSER_BEGIN

#define GEN_DEFINE_ATTRIBUTE_TOKENS Entry( Tok_Attribute_API_Export, "GEN_API_Export_Code" ) Entry( Tok_Attribute_API_Import, "GEN_API_Import_Code" )

enum TokType : u32
{
	Tok_Invalid,
	Tok_Access_Private,
	Tok_Access_Protected,
	Tok_Access_Public,
	Tok_Access_MemberSymbol,
	Tok_Access_StaticSymbol,
	Tok_Ampersand,
	Tok_Ampersand_DBL,
	Tok_Assign_Classifer,
	Tok_Attribute_Open,
	Tok_Attribute_Close,
	Tok_BraceCurly_Open,
	Tok_BraceCurly_Close,
	Tok_BraceSquare_Open,
	Tok_BraceSquare_Close,
	Tok_Capture_Start,
	Tok_Capture_End,
	Tok_Comment,
	Tok_Comment_End,
	Tok_Comment_Start,
	Tok_Char,
	Tok_Comma,
	Tok_Decl_Class,
	Tok_Decl_GNU_Attribute,
	Tok_Decl_MSVC_Attribute,
	Tok_Decl_Enum,
	Tok_Decl_Extern_Linkage,
	Tok_Decl_Friend,
	Tok_Decl_Module,
	Tok_Decl_Namespace,
	Tok_Decl_Operator,
	Tok_Decl_Struct,
	Tok_Decl_Template,
	Tok_Decl_Typedef,
	Tok_Decl_Using,
	Tok_Decl_Union,
	Tok_Identifier,
	Tok_Module_Import,
	Tok_Module_Export,
	Tok_NewLine,
	Tok_Number,
	Tok_Operator,
	Tok_Preprocess_Hash,
	Tok_Preprocess_Define,
	Tok_Preprocess_If,
	Tok_Preprocess_IfDef,
	Tok_Preprocess_IfNotDef,
	Tok_Preprocess_ElIf,
	Tok_Preprocess_Else,
	Tok_Preprocess_EndIf,
	Tok_Preprocess_Include,
	Tok_Preprocess_Pragma,
	Tok_Preprocess_Content,
	Tok_Preprocess_Macro,
	Tok_Preprocess_Unsupported,
	Tok_Spec_Alignas,
	Tok_Spec_Const,
	Tok_Spec_Consteval,
	Tok_Spec_Constexpr,
	Tok_Spec_Constinit,
	Tok_Spec_Explicit,
	Tok_Spec_Extern,
	Tok_Spec_Final,
	Tok_Spec_ForceInline,
	Tok_Spec_Global,
	Tok_Spec_Inline,
	Tok_Spec_Internal_Linkage,
	Tok_Spec_LocalPersist,
	Tok_Spec_Mutable,
	Tok_Spec_NeverInline,
	Tok_Spec_Override,
	Tok_Spec_Static,
	Tok_Spec_ThreadLocal,
	Tok_Spec_Volatile,
	Tok_Spec_Virtual,
	Tok_Star,
	Tok_Statement_End,
	Tok_StaticAssert,
	Tok_String,
	Tok_Type_Typename,
	Tok_Type_Unsigned,
	Tok_Type_Signed,
	Tok_Type_Short,
	Tok_Type_Long,
	Tok_Type_bool,
	Tok_Type_char,
	Tok_Type_int,
	Tok_Type_double,
	Tok_Type_MS_int8,
	Tok_Type_MS_int16,
	Tok_Type_MS_int32,
	Tok_Type_MS_int64,
	Tok_Type_MS_W64,
	Tok_Varadic_Argument,
	Tok___Attributes_Start,
	Tok_Attribute_API_Export,
	Tok_Attribute_API_Import,
	Tok_NumTokens
};

inline Str toktype_to_str( TokType type )
{
	local_persist Str lookup[] = {
		{ "__invalid__",         sizeof( "__invalid__" )         },
		{ "private",             sizeof( "private" )             },
		{ "protected",           sizeof( "protected" )           },
		{ "public",              sizeof( "public" )              },
		{ ".",		           sizeof( "." )                   },
		{ "::",		          sizeof( "::" )                  },
		{ "&",		           sizeof( "&" )                   },
		{ "&&",		          sizeof( "&&" )                  },
		{ ":",		           sizeof( ":" )                   },
		{ "[[",		          sizeof( "[[" )                  },
		{ "]]",		          sizeof( "]]" )                  },
		{ "{",		           sizeof( "{" )                   },
		{ "}",		           sizeof( "}" )                   },
		{ "[",		           sizeof( "[" )                   },
		{ "]",		           sizeof( "]" )                   },
		{ "(",		           sizeof( "(" )                   },
		{ ")",		           sizeof( ")" )                   },
		{ "__comment__",         sizeof( "__comment__" )         },
		{ "__comment_end__",     sizeof( "__comment_end__" )     },
		{ "__comment_start__",   sizeof( "__comment_start__" )   },
		{ "__character__",       sizeof( "__character__" )       },
		{ ",",		           sizeof( "," )                   },
		{ "class",               sizeof( "class" )               },
		{ "__attribute__",       sizeof( "__attribute__" )       },
		{ "__declspec",          sizeof( "__declspec" )          },
		{ "enum",                sizeof( "enum" )                },
		{ "extern",              sizeof( "extern" )              },
		{ "friend",              sizeof( "friend" )              },
		{ "module",              sizeof( "module" )              },
		{ "namespace",           sizeof( "namespace" )           },
		{ "operator",            sizeof( "operator" )            },
		{ "struct",              sizeof( "struct" )              },
		{ "template",            sizeof( "template" )            },
		{ "typedef",             sizeof( "typedef" )             },
		{ "using",               sizeof( "using" )               },
		{ "union",               sizeof( "union" )               },
		{ "__identifier__",      sizeof( "__identifier__" )      },
		{ "import",              sizeof( "import" )              },
		{ "export",              sizeof( "export" )              },
		{ "__new_line__",        sizeof( "__new_line__" )        },
		{ "__number__",          sizeof( "__number__" )          },
		{ "__operator__",        sizeof( "__operator__" )        },
		{ "#",		           sizeof( "#" )                   },
		{ "define",              sizeof( "define" )              },
		{ "if",		          sizeof( "if" )                  },
		{ "ifdef",               sizeof( "ifdef" )               },
		{ "ifndef",              sizeof( "ifndef" )              },
		{ "elif",                sizeof( "elif" )                },
		{ "else",                sizeof( "else" )                },
		{ "endif",               sizeof( "endif" )               },
		{ "include",             sizeof( "include" )             },
		{ "pragma",              sizeof( "pragma" )              },
		{ "__macro_content__",   sizeof( "__macro_content__" )   },
		{ "__macro__",           sizeof( "__macro__" )           },
		{ "__unsupported__",     sizeof( "__unsupported__" )     },
		{ "alignas",             sizeof( "alignas" )             },
		{ "const",               sizeof( "const" )               },
		{ "consteval",           sizeof( "consteval" )           },
		{ "constexpr",           sizeof( "constexpr" )           },
		{ "constinit",           sizeof( "constinit" )           },
		{ "explicit",            sizeof( "explicit" )            },
		{ "extern",              sizeof( "extern" )              },
		{ "final",               sizeof( "final" )               },
		{ "forceinline",         sizeof( "forceinline" )         },
		{ "global",              sizeof( "global" )              },
		{ "inline",              sizeof( "inline" )              },
		{ "internal",            sizeof( "internal" )            },
		{ "local_persist",       sizeof( "local_persist" )       },
		{ "mutable",             sizeof( "mutable" )             },
		{ "neverinline",         sizeof( "neverinline" )         },
		{ "override",            sizeof( "override" )            },
		{ "static",              sizeof( "static" )              },
		{ "thread_local",        sizeof( "thread_local" )        },
		{ "volatile",            sizeof( "volatile" )            },
		{ "virtual",             sizeof( "virtual" )             },
		{ "*",		           sizeof( "*" )                   },
		{ ";",		           sizeof( ";" )                   },
		{ "static_assert",       sizeof( "static_assert" )       },
		{ "__string__",          sizeof( "__string__" )          },
		{ "typename",            sizeof( "typename" )            },
		{ "unsigned",            sizeof( "unsigned" )            },
		{ "signed",              sizeof( "signed" )              },
		{ "short",               sizeof( "short" )               },
		{ "long",                sizeof( "long" )                },
		{ "bool",                sizeof( "bool" )                },
		{ "char",                sizeof( "char" )                },
		{ "int",		         sizeof( "int" )                 },
		{ "double",              sizeof( "double" )              },
		{ "__int8",              sizeof( "__int8" )              },
		{ "__int16",             sizeof( "__int16" )             },
		{ "__int32",             sizeof( "__int32" )             },
		{ "__int64",             sizeof( "__int64" )             },
		{ "_W64",                sizeof( "_W64" )                },
		{ "...",		         sizeof( "..." )                 },
		{ "__attrib_start__",    sizeof( "__attrib_start__" )    },
		{ "GEN_API_Export_Code", sizeof( "GEN_API_Export_Code" ) },
		{ "GEN_API_Import_Code", sizeof( "GEN_API_Import_Code" ) },
	};
	return lookup[type];
}

inline TokType str_to_toktype( Str str )
{
	local_persist u32 keymap[Tok_NumTokens];
	do_once_start for ( u32 index = 0; index < Tok_NumTokens; index++ )
	{
		Str enum_str  = toktype_to_str( (TokType)index );
		keymap[index] = crc32( enum_str.Ptr, enum_str.Len - 1 );
	}
	do_once_end u32 hash = crc32( str.Ptr, str.Len );
	for ( u32 index = 0; index < Tok_NumTokens; index++ )
	{
		if ( keymap[index] == hash )
			return (TokType)index;
	}
	return Tok_Invalid;
}

GEN_NS_PARSER_END
